" vimrc not from maximum awesome, but not os specific
" ===========================================================================
" UI options
set nocursorline " don't highlight current line
set ttyfast " Fast terminal, more characters sent to terminal

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" set autochdir " Working directory is the same as file directory

set colorcolumn=80 " 80 character line

let g:solarized_termtrans = 1
" GUI settings
set background=dark
set t_Co=256
colorscheme solarized

" Fix tabbing
set tabstop=2
set shiftwidth=2
set softtabstop=2

set timeoutlen=1000 ttimeoutlen=0 " Don't wait for <ESC> shortcuts

setlocal spell spelllang=en_ca " English spellcheck

" Underline spelling errors instead of highlighting them.
" This is so that big, red boxes don't appear on non-solarized themes
" hi clear SpellBad
" hi SpellBad cterm=underline
" hi clear SpellRare
" hi SpellRare cterm=underline

set noshowmode " Don't show the -- NORMAL -- status text, since we have Airline

set tags=tags;/ " Keep crawling up directories to find tags

" Don't overwrite paste when pasting in visual mode
xnoremap p pgvy

" Syntastic Scala checker is slow
let g:syntastic_mode_map = { "mode": "active",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": ["scala", "java"] }

" C++11 linting
let g:syntastic_cpp_compiler = 'g++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'

" Disable Ex mode
:nnoremap Q <Nop>

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

let g:airline_powerline_fonts = 1

" coc Config =================================================================

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-next)
nmap <silent> ]g <Plug>(coc-diagnostic-prev)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gR <Plug>(coc-rename)
nmap <silent> gf :CocFix<CR>
nmap <silent> gF :call CocAction('format')<CR>

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Use OSC52
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
let g:oscyank_silent = v:true

" Print github link.
let g:gh_open_command = ' '

" coc Config =================================================================

source ~/.vimrc.which
source ~/.vimrc.local.local

" Show the stack of syntax hilighting classes affecting
" whatever is under the cursor.
" function! SynStack()
"   echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'),
"     \ " > ")
" endfunc

" nnoremap \ :call SynStack()<CR>
" inoremap \ exec "call SynStack()"
