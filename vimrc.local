" vimrc not from maximum awesome, but not os specific
" ===========================================================================
" UI options
set nocursorline " don't highlight current line
set ttyfast " Fast terminal, more characters sent to terminal

" Move vertically by visual line
nnoremap j gj
nnoremap k gk

" set autochdir " Working directory is the same as file directory

set colorcolumn=80 " 80 character line

" GUI settings.
let g:solarized_termtrans = 1
set termguicolors
set background=dark
set t_Co=256
colorscheme solarized8

" Fix tabbing
set tabstop=2
set shiftwidth=2
set softtabstop=2

set timeoutlen=1000 ttimeoutlen=0 " Don't wait for <ESC> shortcuts

" setlocal spell spelllang=en_ca " English spellcheck

" Underline spelling errors instead of highlighting them.
" This is so that big, red boxes don't appear on non-solarized themes
" hi clear SpellBad
" hi SpellBad cterm=underline
" hi clear SpellRare
" hi SpellRare cterm=underline

set noshowmode " Don't show the -- NORMAL -- status text, since we have Airline

set tags=tags;/ " Keep crawling up directories to find tags

" Don't overwrite paste when pasting in visual mode
xnoremap p pgvy

" Disable Ex mode
:nnoremap Q <Nop>

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

let g:airline_powerline_fonts = 1

" coc Config =================================================================

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" use <tab> for trigger completion and navigate to the next complete item
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" use <cr> to confirm completion.
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-next)
nmap <silent> ]g <Plug>(coc-diagnostic-prev)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> gR <Plug>(coc-rename)
" nmap <silent> gf :CocFix<CR>
nmap <silent> gf <Plug>(coc-codeaction-cursor)
nmap <silent> gF :call CocActionAsync('format')<CR>
nmap <silent> gj <Plug>(coc-float-jump)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use OSC52
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | OSCYankReg " | endif
let g:oscyank_silent = v:true

" Print github link.
let g:gh_open_command = ' '

" coc Config =================================================================

" Delete hidden buffers
function DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

source ~/.vimrc.which
source ~/.vimrc.local.local

" Show the stack of syntax hilighting classes affecting
" whatever is under the cursor.
" function! SynStack()
"   echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'),
"     \ " > ")
" endfunc

" nnoremap \ :call SynStack()<CR>
" inoremap \ exec "call SynStack()"
